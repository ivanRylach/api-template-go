version: '3.1'

networks:
  api-service:
    name: api-service

volumes:
  shard0_data:
    driver: local
  cfg_data:
    driver: local

services:

  mongodb-sharded:
    image: 'docker.io/bitnami/mongodb-sharded:4.4-debian-10'
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-sharded
      - MONGODB_SHARDING_MODE=mongos
      - MONGODB_CFG_PRIMARY_HOST=mongodb-cfg
      - MONGODB_CFG_REPLICA_SET_NAME=cfgreplicaset
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
      - MONGODB_ROOT_PASSWORD=password123
    ports:
      - "27017:27017"
    networks:
      - api-service

  mongodb-shard0:
    image: 'docker.io/bitnami/mongodb-sharded:4.4-debian-10'
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-shard0
      - MONGODB_SHARDING_MODE=shardsvr
      - MONGODB_MONGOS_HOST=mongodb-sharded
      - MONGODB_ROOT_PASSWORD=password123
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
      - MONGODB_REPLICA_SET_NAME=shard0
    volumes:
      - 'shard0_data:/bitnami'
    networks:
      - api-service

  mongodb-cfg:
    image: 'docker.io/bitnami/mongodb-sharded:4.4-debian-10'
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-cfg
      - MONGODB_SHARDING_MODE=configsvr
      - MONGODB_ROOT_PASSWORD=password123
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
      - MONGODB_REPLICA_SET_NAME=cfgreplicaset
    volumes:
      - 'cfg_data:/bitnami'
    networks:
      - api-service

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - "9001:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: "mongodb-sharded"
      ME_CONFIG_MONGODB_ADMINUSERNAME: "root"
      ME_CONFIG_MONGODB_ADMINPASSWORD: "password123"
    networks:
      - api-service

#  zookeeper:
#    image: wurstmeister/zookeeper:latest
#    container_name: zookeeper
#    restart: always
#    ports:
#      - "2181:2181"
#    networks:
#      - api-service
#
#  kafka:
#    image: wurstmeister/kafka:2.13-2.7.0
#    container_name: kafka-broker
#    ports:
#      - "9092:9092"
#    environment:
#      KAFKA_ADVERTISED_HOST_NAME: "kafka"
#      KAFKA_CREATE_TOPICS: "events:1:1"
#      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
#    restart: always
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    networks:
#      - api-service
#    depends_on:
#      - zookeeper
#
#  kafka-ui:
#    image: provectuslabs/kafka-ui:latest
#    container_name: kafka-ui
#    ports:
#      - "9000:8080"
#    environment:
#      KAFKA_CLUSTERS_0_NAME: "local"
#      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"
#      KAFKA_CLUSTERS_0_ZOOKEEPER: "zookeeper:2181"
#    restart: always
#    networks:
#      - api-service
#    depends_on:
#      - kafka
